name: PSPager-Release-$(Build.BuildId)
trigger: none

pr:
  branches:
    include:
    - master
    - release*

variables:
  - group: ESRP
  - name: DOTNET_CLI_TELEMETRY_OPTOUT
    value: 1
  - name: POWERSHELL_TELEMETRY_OPTOUT
    value: 1

resources:
  repositories:
  - repository: ComplianceRepo
    type: github
    endpoint: ComplianceGHRepo
    name: PowerShell/compliance

stages:
- stage: Build
  displayName: Build
  pool:
    vmImage: windows-latest
  jobs:
  - job: Build_Job
    displayName: Build Microsoft.PowerShell.Pager
    steps:
    - checkout: self
      clean: true
    - pwsh: |
        $versionString = if ($env:RELEASE_VERSION -eq 'fromBranch') {
          $branch = $env:BUILD_SOURCEBRANCH
          $branchOnly = $branch -replace '^refs/heads/'
          $branchOnly -replace '^.*(release[-/])'
        }
        else {
            $env:RELEASE_VERSION
        }

        $nugetVersion = if ($versionString.StartsWith('v')) {
            $versionString.Substring(1)
        }
        else {
            $versionString
        }

        $vstsCommandString = "vso[task.setvariable variable=Version]$nugetVersion"
        Write-Verbose -Message "setting Version to $releaseTag" -Verbose
        Write-Host -Object "##$vstsCommandString"
      displayName: Set NuGet package version variable

    - pwsh: |
        ./build.ps1 -Clean -Configuration 'Release'
      displayName: Execute build

    - template: EsrpSign.yml@ComplianceRepo
      parameters:
        buildOutputPath: '$(Build.SourcesDirectory)\src\bin\release'
        signOutputPath: '$(Pipeline.Workspace)\signed'
        certificateId: 'CP-230012'
        pattern: |
          **\*.dll
        useMinimatch: true

    - publish: '$(Build.SourcesDirectory)\src\bin\release'
      artifact: build
      displayName: Publish build package

    - pwsh: |
        Copy-Item -Path "$env:BUILD_SOURCESDIRECTORY\src\bin\release" -Destination "$env:PIPELINE_WORKSPACE\signed" -recurse -verbose -force
      displayName: Dummy copy to signed
      condition: eq(variables['SkipSigning'], 'True')

    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet.exe'

    - pwsh: |
        $packageRootPath = '$(System.ArtifactsDirectory)/Microsoft.PowerShell.Pager'
        $libPath = "$packageRootPath/lib/netstandard2.0"
        $lib461Path = "$packageRootPath/lib/net461"
        $null = New-Item -ItemType Directory -Path $libPath -Force
        $null = New-Item -ItemType Directory -Path $lib461Path -Force
        Copy-Item -Path "$env:PIPELINE_WORKSPACE\signed\netstandard2.0\*" -Destination $libPath -Verbose -Exclude '*.pdb'
        Copy-Item -Path "$env:PIPELINE_WORKSPACE\signed\net461\*" -Destination $lib461Path -Verbose -Exclude '*.pdb'
        Copy-Item -Path '$(Build.SourcesDirectory)/yaml/microsoft.powershell.pager.nuspec' -Destination $packageRootPath -Verbose
        Push-Location $packageRootPath
        $version = "$env:VERSION"
        Write-Verbose -Verbose "Creating NuGet package with version $version"
        nuget.exe pack . -Version $version

        if (-not (Test-Path "./Microsoft.PowerShell.Pager.$version.nupkg")) {
            throw 'NuGet package not created.'
        }
        else {
            $null = New-Item -Path '$(System.ArtifactsDirectory)/nuget' -ItemType Directory
            Copy-Item "./Microsoft.PowerShell.Pager.$version.nupkg" -Destination '$(System.ArtifactsDirectory)/nuget' -Verbose -Force
        }
      displayName: Create NuGet Package

    - pwsh: |
        Get-ChildItem -Path '$(System.ArtifactsDirectory)/nuget' -recurse
      displayName: Capture nuget package after creation

    - template: EsrpSign.yml@ComplianceRepo
      parameters:
        buildOutputPath: '$(System.ArtifactsDirectory)/nuget'
        signOutputPath: '$(Pipeline.Workspace)/signed-nuget'
        # this is the cert for NuPkg signing
        certificateId: "CP-401405"
        # this is the pattern for NuPkg signing
        pattern: |
            **\*.nupkg
        useMinimatch: true

    - pwsh: |
        Copy-Item -Path "$env:SYSTEM_ARTIFACTSDIRECTORY\nuget\*.nupkg" -Destination "$env:PIPELINE_WORKSPACE\signed-nuget" -recurse -verbose -force
      displayName: Dummy nuget copy to signed
      condition: eq(variables['SkipSigning'], 'True')

    - pwsh: |
        Get-ChildItem -Path '$(Pipeline.Workspace)/signed-nuget' -recurse
      displayName: Capture signed nuget package

    - pwsh: |
        $version = "$env:VERSION"
        $nugetPkgPath = Get-Item -Path "$env:PIPELINE_WORKSPACE\signed-nuget\Microsoft.PowerShell.Pager.$version.nupkg"
        $vstsCommandString = "vso[task.setvariable variable=nugetPkgPath]${nugetPkgPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Set nuget package path

    - publish: '$(NUGETPKGPATH)'
      artifact: nuget
      displayName: Publish nuget package

    - publish: '$(Build.SourcesDirectory)\src\obj\project.assets.json'
      artifact: AssetsJson
      displayName: Publish project.assets.json

- stage: compliance
  displayName: Compliance
  dependsOn: Build
  jobs:
  - job: Compliance_Job
    pool:
      name: Package ES CodeHub Lab E
    steps:
    - checkout: self
    - checkout: ComplianceRepo

    - download: AssetsJson
    - download: build

    - template: assembly-module-compliance.yml@ComplianceRepo
      parameters:
        # binskim
        AnalyzeTarget: '$(Pipeline.Workspace)/build/*.dll'
        AnalyzeSymPath: 'SRV*'
        # component-governance
        sourceScanPath: '$(Pipeline.Workspace)/AssetsJson'
        # credscan
        suppressionsFile: ''
        # TermCheck
        optionsRulesDBPath: ''
        optionsFTPath: ''
        # tsa-upload
        codeBaseName: 'PSPager_202007'
        # selections
        APIScan: false # set to false when not using Windows APIs.

- template: template/publish.yml
  parameters:
    stageName: AzArtifactsFeed
    environmentName: PSPagerAzFeedApproval
    feedCredential: AzArtifactFeedPSPagerPush

- template: template/publish.yml
  parameters:
    stageName: NuGet
    environmentName: PSPagerNuGetApproval
    feedCredential: NugetOrgPush
